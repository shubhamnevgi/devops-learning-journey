# 🚀 Day 19 Notes: Jenkins Zero to Hero Guide

## What is Jenkins and Why Use It in DevOps?

Jenkins is an open-source automation server. It helps automate tasks involved in building, testing, and deploying software. Jenkins sits at the heart of modern DevOps because it:

-   🤖 **Automates repetitive work** like running tests, compiling code, and deploying artifacts.
-   🔄 **Enables continuous integration (CI)** by merging developers’ changes, triggering builds, and catching errors early.
-   🚚 **Facilitates continuous delivery (CD)** by automatically deploying, testing, and promoting applications to production.
-   🔌 **Integrates with lots of tools**: Git, Maven, Docker, Kubernetes, Slack, AWS, and more.
-   📈 **Improves efficiency, quality, and speed** in software delivery for teams.

> **Example:** When a developer commits code, Jenkins can automatically build the software, run tests, and deploy updates—reducing manual work and errors.

---

## 🏗️ What is the Project About?

### **Goal**
Install and configure Jenkins on AWS EC2, use Docker as a Jenkins agent (instead of VMs), and automate deployments (even to Kubernetes clusters) using modern DevOps practices.

### **Why This Matters**
-   Shows a full Jenkins CI/CD setup from zero.
-   Demonstrates efficient, scalable pipeline automation (with Docker).
-   Prepares you for real-world interviews and daily DevOps work.

---

## 🛠️ How: Step-by-Step Procedure

### **1. Prepare AWS EC2 Instance**
-   Launch an Ubuntu EC2 instance in the AWS Console.
-   SSH into it with your key pair.
-   Update packages: `sudo apt update`

### **2. Install Java (Jenkins prerequisite)**
```bash
sudo apt install openjdk-11-jre
java -version    # ensure Java is available
````

Java is required because Jenkins runs on the JVM.

### **3. Install Jenkins**

```bash
curl -fsSL [https://pkg.jenkins.io/debian/jenkins.io.key](https://pkg.jenkins.io/debian/jenkins.io.key) | sudo tee /usr/share/keyrings/jenkins-keyring.asc > /dev/null
echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] [https://pkg.jenkins.io/debian](https://pkg.jenkins.io/debian) binary/ | sudo tee /etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt-get update
sudo apt-get install jenkins
```

Start and enable Jenkins to run on boot:

```bash
sudo systemctl enable jenkins
sudo systemctl start jenkins
sudo systemctl status jenkins
```

Open EC2’s Security Group for port `8080` so you can access Jenkins via `http://<EC2_Public_IP>:8080`.

### **4. Initial Jenkins Setup**

Get the admin password:

```bash
sudo cat /var/lib/jenkins/secrets/initialAdminPassword
```

  - Paste this password to log in for the first time.
  - Install “Suggested Plugins” and create your own admin user.

### **5. Install Docker on Jenkins EC2**

```bash
sudo apt install docker.io
# Add Jenkins and ubuntu users to the docker group
sudo usermod -aG docker jenkins
sudo usermod -aG docker ubuntu
sudo systemctl restart docker
# Check docker works for Jenkins user
sudo su - jenkins
docker run hello-world
```

Restart Jenkins to ensure it picks up the Docker access.

### **6. Install Docker Pipeline Plugin in Jenkins**

  - Go to “Manage Jenkins” → “Manage Plugins”.
  - Search for and install the `Docker Pipeline` Plugin.

### **7. Create a Jenkins Pipeline Using Docker as an Agent**

  - In Jenkins, select “New Item” → “Pipeline”.
  - Use a Jenkinsfile to specify stages, agents, and steps, e.g.:

<!-- end list -->

```groovy
pipeline {
  agent {
    docker { image 'node:16-alpine' }
  }
  stages {
    stage("Test") {
      steps {
        sh 'node --version'
      }
    }
  }
}
```

> Jenkins automatically executes this pipeline inside a container, then destroys it—no idle VMs\! Containers isolate dependencies and are fast, reusable, and cost-effective.

### **8. Multi-Stage, Multi-Agent Pipelines**

For apps with backend, frontend, and databases, use different Docker images per stage:

  - Maven for the backend
  - Node.js for the frontend
  - MySQL for the DB

> Jenkins creates/destroys containers as needed for each stage (demonstrated live in the video).

### **9. (Advanced) Deploy to Kubernetes Using GitOps**

  - Use Jenkins pipelines (with plugins or kubectl commands) to deploy artifacts to Kubernetes clusters.
  - Update manifests/scripts in Git, so tools like ArgoCD or Jenkins X can deploy automatically (GitOps principles).

-----

## ❓ Interview Questions: Jenkins for Beginners

### **Basic Concepts**

  - **What is Jenkins? Why is it used in DevOps?**
      - Jenkins automates building, testing, and deploying software, enabling CI/CD processes essential for DevOps.
  - **What is a Jenkins job?**
      - A configured task (e.g., build, test, deploy) that Jenkins can run.
  - **How do you install Jenkins on AWS EC2?**
      - Launch EC2, install Java, install Jenkins, open port 8080, access the web UI, and initialize and set up plugins/users.
  - **What is the difference between freestyle and pipeline jobs?**
      - Freestyle: GUI-based, simple, less flexible.
      - Pipeline: Code-based (Jenkinsfile/Groovy), supports stages, agents, best for complex, versioned workflows.
  - **How does Jenkins enable CI/CD?**
      - Automates integration, builds, testing, artifact delivery, and deployment across environments.

### **Intermediate Concepts**

  - **What is a Jenkins agent?**
      - A worker node or container where pipeline steps run; Docker agents create containers on-demand for each job.
  - **Why use Docker as Jenkins agents?**
      - Avoid idle VM costs, get fast spin-up, better dependency isolation, and simplified upgrades—just change the Docker image tag in the code.
  - **Explain the concept of “pipeline as code.”**
      - Pipelines are defined by a Jenkinsfile (Groovy/Declarative), versioned in Git, supporting peer review and reproducibility.

### **DevOps and GitOps**

  - **What is GitOps and how does Jenkins fit in?**
      - GitOps makes Git the source of truth for infrastructure and deployment. Jenkins automates the build/update, and triggers deployments to clusters via code changes.
  - **How do you automate deployments to Kubernetes with Jenkins?**
      - Use pipeline stages with kubectl/Helm commands; update manifests via GitOps for auto-deployment.

-----

## 🎯 What Does This Project Achieve (Results)?

  - A production-grade Jenkins setup, instantly scalable using Docker containers as build agents.
  - Efficient, cost-effective CI/CD pipelines for any tech stack.
  - GitOps-powered automated deployments to Kubernetes.
  - Skills in modern pipeline design, agent management, and pipeline-as-code practices—ready for interviews AND real-world work.

-----

## 💡 Key Takeaways for Beginners

  - Jenkins is core to DevOps for automating builds, tests, and deployments.
  - Use **pipelines** (not freestyle jobs) for flexibility and best practices.
  - **Docker agents** solve scaling, isolation, upgrade, and cost problems.
  - Understand CI/CD, agents, plugins, and pipeline coding for interviews.
  - Practice on AWS EC2 and try multi-stage pipelines + GitOps-style deployments for advanced readiness.
